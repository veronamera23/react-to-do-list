// Firestore Security Rules
// Add these rules in Firebase Console > Firestore Database > Rules tab

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow read/write access on tasks collection
    match /tasks/{taskId} {
      // Basic security rules - adjust as needed for your app's requirements
      allow read: if true;  // Anyone can read tasks
      allow create, update, delete: if true;  // Anyone can create, update, delete tasks
      
      // For a production app, you might want to add authentication:
      // allow read, write: if request.auth != null;
    }
  }
}

// Firestore Indexes (if needed)
// You might need to create an index for sorting tasks by multiple fields
// Firebase will prompt you in the console if an index is needed
// Here's an example index definition:
/*
{
  "indexes": [
    {
      "collectionGroup": "tasks",
      "queryScope": "COLLECTION",
      "fields": [
        { "fieldPath": "completed", "order": "ASCENDING" },
        { "fieldPath": "dueDate", "order": "ASCENDING" }
      ]
    }
  ]
}
*/

// Example Firebase app initialization with more options
// You can use this as an alternative to the simpler version in firebase.js

/*
import { initializeApp } from "firebase/app";
import { getFirestore, connectFirestoreEmulator } from "firebase/firestore";
import { getAuth, connectAuthEmulator } from "firebase/auth";

const firebaseConfig = {
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_PROJECT_ID.firebaseapp.com",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_PROJECT_ID.appspot.com",
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
  appId: "YOUR_APP_ID"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

// Connect to emulators in development environment
if (process.env.NODE_ENV === 'development') {
  connectFirestoreEmulator(db, 'localhost', 8080);
  connectAuthEmulator(auth, 'http://localhost:9099');
}

export { app, db, auth };
*/